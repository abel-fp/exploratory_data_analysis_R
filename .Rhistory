library(ggplot2)
load(diamonds)
data(diamonds)
library(ggplot2)
data(diamonds)
# Price Histogram with Facer and Color
ggplot(aes(x=price), data=diamonds) +
geom_histogram(binwidth = 30) +
facet_wrap( ~ cut)
# Price Histogram with Facer and Color
ggplot(aes(x=price), data=diamonds) +
geom_histogram(binwidth = 30, scale_fill_brewer(type='qual')) +
facet_wrap( ~ color)
# Price Histogram with Facer and Color
ggplot(aes(x=price), data=diamonds) +
geom_histogram(aes(scale_fill_brewer(type='qual')),binwidth = 30) +
facet_wrap( ~ color)
# Price Histogram with Facer and Color
ggplot(aes(x=price), data=diamonds) +
geom_histogram(binwidth = 30) +
facet_wrap( ~ color)
# Price Histogram with Facer and Color
ggplot(aes(x=price+1), data=diamonds) +
geom_histogram(binwidth = 30) +
scale_x_log10() +
facet_wrap( ~ color)
# Price Histogram with Facer and Color
ggplot(aes(x=price+1), data=diamonds) +
geom_histogram() +
scale_x_log10() +
facet_wrap( ~ color)
# Price Histogram with Facer and Color
ggplot(aes(x=price+1), data=diamonds) +
geom_histogram(aes(color = cut)) +
scale_x_log10() +
facet_wrap( ~ color)
# Price Histogram with Facer and Color
ggplot(aes(x=price+1), data=diamonds) +
geom_histogram(aes(color = cut,scale_fill_brewer(type='qual'))) +
scale_x_log10() +
facet_wrap( ~ color)
# Price Histogram with Facer and Color
ggplot(aes(x=price+1), data=diamonds) +
geom_histogram(aes(color = cut),scale_fill_brewer(type='qual')) +
scale_x_log10() +
facet_wrap( ~ color)
# Price Histogram with Facer and Color
ggplot(aes(x=price+1), data=diamonds) +
geom_histogram(aes(color = cut)) +
scale_fill_brewer(type='qual') +
scale_x_log10() +
facet_wrap( ~ color)
# Price Histogram with Facer and Color
ggplot(aes(x=price), data=diamonds) +
geom_histogram(aes(color = cut)) +
scale_fill_brewer(type='qual') +
scale_x_log10() +
facet_wrap( ~ color)
# Price Histogram with Facer and Color
ggplot(aes(x=price,fill=cut), data=diamonds) +
geom_histogram(bins=30) +
scale_fill_brewer(type='qual') +
scale_x_log10() +
facet_wrap( ~ color)
summary(diamonds$cut)
with(diamonds, cut, summary)
# Price Histogram with Facer and Color
ggplot(aes(x=price,fill=cut), data=diamonds) +
geom_histogram(bins=30) +
scale_fill_brewer(type='qual') +
scale_x_log10() +
# Price Histogram with Facer and Color
ggplot(aes(x=price,fill=cut), data=diamonds) +
geom_histogram(bins=30) +
scale_fill_brewer(type='qual') +
scale_x_log10()
# Price Histogram with Facer and Color
ggplot(aes(x=price,fill=cut), data=diamonds) +
geom_histogram(bins=30) +
scale_fill_brewer(type='qual') +
scale_x_log10()
# Price Histogram with Facer and Color
ggplot(aes(x=price,fill=cut), data=diamonds) +
geom_histogram(bins=30) +
scale_fill_brewer(type='qual')
# Price Histogram with Facer and Color
ggplot(aes(x=price,fill=cut), data=diamonds) +
geom_histogram() +
scale_fill_brewer()
# Price Histogram with Facer and Color
ggplot(aes(x=price,fill=cut), data=diamonds) +
geom_histogram(position='dodge', binwidth = 1000) +
scale_fill_brewer()
# Price Histogram with Facer and Color
ggplot(aes(x=price,fill=cut), data=diamonds) +
geom_histogram(binwidth = 1000) +
scale_fill_brewer(type='qual') +
scale_x_log10() +
facet_grid(~ color)
# Price Histogram with Facer and Color
ggplot(aes(x=price,fill=cut), data=diamonds) +
geom_histogram(binwidth = 1000) +
scale_fill_brewer(type='qual') +
scale_x_log10() +
facet_wrap(~ color)
# Price Histogram with Facer and Color
ggplot(aes(x=price,fill=cut), data=diamonds) +
geom_histogram() +
scale_fill_brewer(type='qual') +
scale_x_log10() +
facet_wrap(~ color)
# Price Histogram with Facer and Color
ggplot(aes(x=price,fill=cut), data=diamonds) +
geom_histogram() +
scale_fill_brewer(type='qual') +
scale_x_log10() +
facet_grid(~ color)
# Price Histogram with Facer and Color
ggplot(aes(x=price,fill=cut), data=diamonds) +
geom_histogram() +
scale_fill_brewer(type='qual') +
scale_x_log10() +
facet_wrap(~ color)
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
data(diamonds)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points",shape = I('.'))),
upper = list(continuous = wrap("box",outlier.shape = I('.'))))
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
data(diamonds)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points",shape = I('.'))),
upper = list(continuous = wrap("box",outlier.shape = I('.'))))
ggpairs(diamond_samp,
lower = list(continuous = wrap("points",shape = I('.'))),
upper = list(combo = wrap("box",outlier.shape = I('.'))))
p2 <- ggplot(aes(x = price), data = diamonds) +
geom_histogram() +
coord_cartesian(log10(x)) +
labs(title = 'Price (log10)')
library(gridExtra)
p1 <- ggplot(aes(x = price), data = diamonds) +
geom_histogram() +
labs(title = 'Price')
p2 <- ggplot(aes(x = price), data = diamonds) +
geom_histogram() +
coord_cartesian(x = 'log10') +
labs(title = 'Price (log10)')
grid.arrange(p1,p2,ncol=2)
grid.arrange(p1,p2,ncol(2))
grid.arrange(p1,p2,ncol=2)
grid.arrange(p1,ncol=2)
p2 <- ggplot(aes(x = price), data = diamonds) +
geom_histogram() +
scale_x_log10() +
labs(title = 'Price (log10)')
p2 <- ggplot(aes(x = price), data = diamonds) +
geom_histogram() +
scale_x_log10() +
labs(title = 'Price (log10)')
grid.arrange(p1,p2,ncol=2)
p1 <- ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 100,fill=I('#099009')) +
labs(title = 'Price')
grid.arrange(p1,p2,ncol=2)
p2 <- ggplot(aes(x = price), data = diamonds) +
geom_histogram(binwidth = 0.01, fill = I('#F79430')) +
scale_x_log10() +
labs(title = 'Price (log10)')
grid.arrange(p1,p2,ncol=2)
ggplot(aes(x = carat, y = price),
data = diamonds) +
geom_point() +
scale_y_log10() +
labs(title = "Price (log10) by Carat")
cuberoot_trans = function() {
trans_new('cuberoot', transform = function(x) {
x^(1/3),inverse = function(x) x^3)
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat),decreasing=T))
head(sort(table(diamonds$price),decreasing=T))
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=1/2,size=3/4,positions = jitter) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=1/2,size=3/4,position = jitter) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha=1/2,size=3/4,position = "jitter") +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
install.packages('RColorBrewer')
library(RColorBrewer)
# install and load the RColorBrewer package
install.packages('RColorBrewer')
install.packages("RColorBrewer")
library(RColorBrewer)
ggplot(aes(x = carat, y = price,color=clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
ggplot(aes(x = carat, y = price,color=clarity), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color", reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color", reverse = F,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
# I is so that lm() takes those transformed values as they are transformed
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5,sdigits=3)
install.package('bitops')
install.packages('bitops')
install.packages('RCurl')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color", reverse = F,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
install.packages('RCurl')
library('bitops')
library('RCurl')
library(RColorBrewer)
library(gridExtra)
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
library('ggplot2')
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color", reverse = F,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
load(rawConnection(diamondsurl))
source(rawConnection(diamondsurl))
View(diamond_samp)
load(rawConnection(diamondsurl))
setwd("C:/Users/mudor/Dropbox/online_courses/udacity/data_nanodegree/exploratory_data_analysis/lesson6/")
load("BigDiamonds.rda")
names(diamondsbig)
ggplot(aes(x = carat, y = price), data = diamondsbig) +
geom_point()
ggplot(aes(x = carat, y = price), data = diamondsbig) +
geom_point(alpha=1/100)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig)
# I is so that lm() takes those transformed values as they are transformed
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5,sdigits=3)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
# I is so that lm() takes those transformed values as they are transformed
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5,sdigits=3)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig)
# I is so that lm() takes those transformed values as they are transformed
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5,sdigits=3)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
?expa
?exp
exp
modelEstimate
exp(modelEstimate)
thisDiamond = data.frame(carat = 1.50, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
modelEstimate
exp(modelEstimate)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
modelEstimate
exp(modelEstimate)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
modelEstimate
exp(modelEstimate)
# want it to. This will clean up the flow of your report.
library(ggplot2)
library(gridExtra)
library(GGally)
library(RColorBrewer)
library(tidyr)
library(dplyr)
install.packages(psych)
install.packages(psych)
library(psych)
install.packages("psych",dependencies = TRUE)
getwd()
set("C:/Users/mudor/Dropbox/online_courses/udacity/data_nanodegree/exploratory_data_analysis/final_project/")
setwd("C:/Users/mudor/Dropbox/online_courses/udacity/data_nanodegree/exploratory_data_analysis/final_project/")
rwine <- read.csv("wineQualityReds.csv")
rwine <- select(rwine,-X)
pairs.panel(rwine)
pairs.panels(rwine)
library(psych)
pairs.panels(rwine)
describe(rwine)
pairs.panels(rwine,bg=c("yellow","blue"),pch=21)
pairs.panels(rwine,pch=',')
pairs.panels(rwine,pch=',')
pairs.panels(rwine,pch=21)
pairs.panels(rwine,bg = c('black','blue'),pch=21)
library(psych)
pairs.panels(rwine[2:4,11,12],bg = c('black','blue'),pch=21)
names(rwine)
pairs.panels(rwine[,imp],bg = c('black','blue'),pch=21)
imp <- c("citric.acid", "pH", "alcohol", "quality")
pairs.panels(rwine[,imp],bg = c('black','blue'),pch=21)
pairs.panels(rwine[,imp],pch=21)
pairs.panels(rwine[,imp],pch=21,jiggle = TRUE)
library(ggplot2)
library(gridExtra)
library(RColorBrewer)
library(tidyr)
library(dplyr)
library(psych)
View(rwine)
ggplot(rwine, aes(alcohol, quality)) +
geom_jitter(alpha=0.1)
ggplot(ave_alc, aes(ave_alcohol, quality)) +
geom_line(size=0.75, color='red') +
geom_point(alpha=0.1)
ave_alc <- rwine %>%
group_by(quality) %>%
summarise(ave_alcohol = mean(alcohol),
meadian_alcohol = median(alcohol),
n = n()) %>%
arrange(quality)
ggplot(ave_alc, aes(ave_alcohol, quality)) +
geom_line(size=0.75, color='red') +
geom_point(alpha=0.1)
ggplot() +
geom_line(ave_alc, aes(ave_alcohol, quality), size=0.75, color='red') +
geom_point(rwine, aes(alcohol, quality), alpha=0.1)
ggplot() +
geom_line(ave_alc, aes(ave_alcohol, quality), size=0.75, color='red')
ggplot(rwine, aes(alcohol, quality)) +
geom_line(stat='summary',fun.y=median, size=0.75, color='red') +
geom_point(alpha=0.1)
ggplot(rwine, aes(quality, alcohol)) +
geom_line(stat='summary',fun.y=mean, size=0.75, color='red') +
geom_point(alpha=0.1)
ggplot(rwine, aes(quality, alcohol)) +
geom_line(stat='summary',fun.y=mean, size=0.75, color='red') +
geom_jitter(alpha=0.1)
ggplot(rwine, aes(volatile.acidity, quality)) +
geom_jitter(alpha=0.1)
ggplot(rwine, aes(quality, as.factor(alcohol))) +
geom_line(stat='summary',fun.y=mean, size=0.75, color='red') +
geom_jitter(alpha=0.1)
ggplot(rwine, aes(as.factor(quality), alcohol)) +
geom_line(stat='summary',fun.y=mean, size=0.75, color='red') +
geom_jitter(alpha=0.1)
ggplot(rwine, aes(quality, alcohol)) +
geom_line(stat='summary',fun.y=mean, size=0.75, color='red') +
geom_jitter(alpha=0.1)
ggplot(rwine, aes(quality, alcohol)) +
geom_jitter(alpha=0.1)
ggplot(rwine, aes(quality, volatile.acidity)) +
geom_jitter(alpha=0.1)
ggplot(rwine, aes(quality, volatile.acidity)) +
geom_line(stat='summary', fun.y=mean, size=0.75, color='red') +
geom_jitter(alpha=0.1)
ggplot(rwine, aes(quality, 1/volatile.acidity)) +
geom_line(stat='summary', fun.y=mean, size=0.75, color='red') +
geom_jitter(alpha=0.1)
cor(ave_vol.ac$quality, 1/ave_vol.ac$ave_volatile.acidity)
ave_vol.ac <- rwine %>%
group_by(quality) %>%
summarise(ave_volatile.acidity = mean(volatile.acidity),
meadian_volatile.acidity = median(volatile.acidity),
n = n()) %>%
arrange(quality)
cor(ave_vol.ac$quality, 1/ave_vol.ac$ave_volatile.acidity)
ggplot(rwine, aes(pH, fixed.acidity)) +
geom_point(alpha=0.1)
ggplot(rwine, aes(total.sulfur.dioxide, sugar_to_salt)) +
geom_point(alpha=0.1) +
coord_cartesian(x=c(0,200), y=c(0,100))
